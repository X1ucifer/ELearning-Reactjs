{"ast":null,"code":"import Stripe from 'stripe';\nimport { v4 as uuidv4 } from 'uuid';\nimport jwt from 'jsonwebtoken';\nimport Cors from 'cors';\nimport initMiddleware from '@/lib/init-middleware';\nimport { enroled_courses as Enroled_courses } from '@/models/index';\nconst stripe = Stripe(process.env.STRIPE_SECRET_KEY); // Initialize the cors middleware\n\nconst cors = initMiddleware( // You can read more about the available options here: https://github.com/expressjs/cors#configuration-options\nCors({\n  // Only allow requests with GET, POST and OPTIONS\n  methods: ['GET', 'POST', 'OPTIONS', 'DELETE', 'PUT']\n}));\nexport default (async (req, res) => {\n  await cors(req, res);\n\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).json({\n      message: \"No autorization token\"\n    });\n  }\n\n  const {\n    paymentData\n  } = req.body; // console.log(req.body)\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const prevCustomer = await stripe.customers.list({\n      email: paymentData.email,\n      limit: 1\n    });\n    const isExistingCustomer = prevCustomer.data.length > 0;\n    let newCustomer;\n\n    if (!isExistingCustomer) {\n      newCustomer = await stripe.customers.create({\n        email: paymentData.email,\n        source: paymentData.id\n      });\n    }\n\n    const customer = isExistingCustomer && prevCustomer.data[0].id || newCustomer.id;\n    await stripe.charges.create({\n      currency: \"usd\",\n      amount: paymentData.stripeTotal,\n      receipt_email: paymentData.email,\n      customer,\n      description: `Checkout | ${paymentData.email} | ${paymentData.id} | CourseID ${paymentData.courseId}`\n    }, {\n      idempotencyKey: uuidv4()\n    });\n    await Enroled_courses.create({\n      payment_email: paymentData.email,\n      cost: paymentData.stripeTotal,\n      userId: userId,\n      courseId: paymentData.courseId\n    });\n    res.send(\"Checkout successful!\");\n  } catch (error) {\n    console.error(error);\n    res.send(\"Error proccessing charge\");\n  }\n});","map":null,"metadata":{},"sourceType":"module"}