{"ast":null,"code":"import Cors from 'cors';\nimport bcrypt from 'bcrypt';\nimport { v4 as uuidv4 } from 'uuid';\nimport jwt from 'jsonwebtoken';\nimport isEmail from 'validator/lib/isEmail';\nimport isLength from 'validator/lib/isLength';\nimport initMiddleware from '@/lib/init-middleware';\nimport { users as User } from '@/models/index'; // import { confirmEmailAddress } from '../../../../email-templates/confirm-email'\n// Initialize the cors middleware\n\nconst cors = initMiddleware( // You can read more about the available options here: https://github.com/expressjs/cors#configuration-options\nCors({\n  // Only allow requests with GET, POST and OPTIONS\n  methods: ['GET', 'POST', 'OPTIONS', 'DELETE', 'PUT']\n}));\nexport default (async (req, res) => {\n  await cors(req, res);\n  const confirmToken = uuidv4(); // Recieved params from request\n\n  let {\n    name,\n    email,\n    password,\n    confirmPassword\n  } = req.body;\n\n  try {\n    if (!isLength(name, {\n      min: 3\n    })) {\n      return res.status(422).send(\"The name should be a minimum of Three characters long\");\n    } else if (!isEmail(email)) {\n      return res.status(422).send(\"Email should be a valid email address\");\n    } else if (!isLength(password, {\n      min: 6\n    })) {\n      return res.status(422).send(\"Password should be minimum of Six characters long\");\n    } else if (password != confirmPassword) {\n      return res.status(422).send(\"Password doesn't match\");\n    } // Check if user with that email if already exists\n\n\n    const user = await User.findOne({\n      where: {\n        email: email\n      }\n    });\n\n    if (user) {\n      return res.status(422).send(`User already exist with email ${email}`);\n    } // Encrypt password with bcrypt\n\n\n    const passwordHash = await bcrypt.hash(password, 10);\n    const newUser = await User.create({\n      name,\n      email,\n      password: passwordHash,\n      emailResetToken: confirmToken\n    });\n    const token = jwt.sign({\n      userId: newUser.id\n    }, process.env.JWT_SECRET, {\n      expiresIn: '7d'\n    }); // confirmEmailAddress(newUser)\n\n    res.status(201).json(token);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error in account signup. Please try again.\");\n  }\n});","map":null,"metadata":{},"sourceType":"module"}