{"ast":null,"code":"import Cors from 'cors';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport isEmail from 'validator/lib/isEmail';\nimport initMiddleware from '@/lib/init-middleware';\nimport { users as User } from '@/models/index'; // Initialize the cors middleware\n\nconst cors = initMiddleware( // You can read more about the available options here: https://github.com/expressjs/cors#configuration-options\nCors({\n  // Only allow requests with GET, POST and OPTIONS\n  methods: ['GET', 'POST', 'OPTIONS', 'DELETE', 'PUT']\n}));\nexport default (async (req, res) => {\n  await cors(req, res);\n  const {\n    email,\n    password\n  } = req.body;\n\n  try {\n    if (!isEmail(email)) {\n      return res.status(422).send(\"Email should be a valid email address\");\n    }\n\n    const user = await User.findOne({\n      where: {\n        email: email\n      }\n    });\n\n    if (!user) {\n      return res.status(404).send(\"User account does not exist\");\n    }\n\n    if (!user.active) {\n      return res.status(404).send(\"This account is temporarily disabled, please contact the support email\");\n    }\n\n    const passwordsMatch = await bcrypt.compare(password, user.password);\n\n    if (passwordsMatch) {\n      const token = jwt.sign({\n        userId: user.id\n      }, process.env.JWT_SECRET, {\n        expiresIn: '7d'\n      });\n      res.status(200).send(token);\n    } else {\n      res.status(401).send(\"Password is not correct\");\n    }\n  } catch (error) {\n    // console.error(error)\n    res.status(500).send(\"Error logging in user\");\n  }\n});","map":null,"metadata":{},"sourceType":"module"}