{"ast":null,"code":"import Cors from 'cors';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport isEmail from 'validator/lib/isEmail';\nimport initMiddleware from '@/lib/init-middleware';\nimport { users as User } from '@/models/index'; // Initialize the cors middleware\n\nconst cors = initMiddleware( // You can read more about the available options here: https://github.com/expressjs/cors#configuration-options\nCors({\n  // Only allow requests with GET, POST and OPTIONS\n  methods: ['GET', 'POST', 'OPTIONS', 'DELETE', 'PUT']\n}));\nexport default (async (req, res) => {\n  await cors(req, res);\n  const {\n    email,\n    password\n  } = req.body;\n\n  try {\n    if (!isEmail(email)) {\n      return res.status(422).send(\"Email should be a valid email address\");\n    }\n\n    const user = await User.findOne({\n      where: {\n        email: email\n      }\n    });\n\n    if (!user) {\n      return res.status(404).send(\"User account does not exist\");\n    }\n\n    if (!user.active) {\n      return res.status(404).send(\"This account is temporarily disabled, please contact the support email\");\n    }\n\n    const passwordsMatch = await bcrypt.compare(password, user.password);\n\n    if (passwordsMatch) {\n      const token = jwt.sign({\n        userId: user.id\n      }, process.env.JWT_SECRET, {\n        expiresIn: '7d'\n      });\n      res.status(200).send(token);\n    } else {\n      res.status(401).send(\"Password is not correct\");\n    }\n  } catch (error) {\n    // console.error(error)\n    res.status(500).send(\"Error logging in user\");\n  }\n});","map":{"version":3,"sources":["C:/Users/AJ/Downloads/Spyberrys/Spyberrys/Spyberrys_app/pages/api/v1/auth/signin.js"],"names":["Cors","bcrypt","jwt","isEmail","initMiddleware","users","User","cors","methods","req","res","email","password","body","status","send","user","findOne","where","active","passwordsMatch","compare","token","sign","userId","id","process","env","JWT_SECRET","expiresIn","error"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,SAASC,KAAK,IAAIC,IAAlB,QAA8B,gBAA9B,C,CAEA;;AACA,MAAMC,IAAI,GAAGH,cAAc,EACvB;AACAJ,IAAI,CAAC;AACD;AACAQ,EAAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,MAAR,EAAgB,SAAhB,EAA2B,QAA3B,EAAqC,KAArC;AAFR,CAAD,CAFmB,CAA3B;AAQA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,QAAMH,IAAI,CAACE,GAAD,EAAMC,GAAN,CAAV;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBH,GAAG,CAACI,IAAhC;;AACA,MAAI;AACA,QAAI,CAACV,OAAO,CAACQ,KAAD,CAAZ,EAAoB;AAChB,aAAOD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uCAArB,CAAP;AACH;;AAED,UAAMC,IAAI,GAAG,MAAMV,IAAI,CAACW,OAAL,CAAa;AAC5BC,MAAAA,KAAK,EAAE;AAAEP,QAAAA,KAAK,EAAEA;AAAT;AADqB,KAAb,CAAnB;;AAIA,QAAG,CAACK,IAAJ,EAAU;AACN,aAAON,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,6BAArB,CAAP;AACH;;AAED,QAAG,CAACC,IAAI,CAACG,MAAT,EAAgB;AACZ,aAAOT,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wEAArB,CAAP;AACH;;AAED,UAAMK,cAAc,GAAG,MAAMnB,MAAM,CAACoB,OAAP,CAAeT,QAAf,EAAyBI,IAAI,CAACJ,QAA9B,CAA7B;;AACA,QAAIQ,cAAJ,EAAmB;AACf,YAAME,KAAK,GAAGpB,GAAG,CAACqB,IAAJ,CAAS;AAAEC,QAAAA,MAAM,EAAER,IAAI,CAACS;AAAf,OAAT,EAA6BC,OAAO,CAACC,GAAR,CAAYC,UAAzC,EAAqD;AAACC,QAAAA,SAAS,EAAE;AAAZ,OAArD,CAAd;AACAnB,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBO,KAArB;AACH,KAHD,MAGO;AACHZ,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,yBAArB;AACH;AACJ,GAxBD,CAwBE,OAAOe,KAAP,EAAc;AACZ;AACApB,IAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uBAArB;AACH;AACJ,CA/BD","sourcesContent":["import Cors from 'cors'\nimport bcrypt from 'bcrypt'\nimport jwt from 'jsonwebtoken'\nimport isEmail from 'validator/lib/isEmail'\nimport initMiddleware from '@/lib/init-middleware'\nimport { users as User } from '@/models/index'\n\n// Initialize the cors middleware\nconst cors = initMiddleware(\n    // You can read more about the available options here: https://github.com/expressjs/cors#configuration-options\n    Cors({\n        // Only allow requests with GET, POST and OPTIONS\n        methods: ['GET', 'POST', 'OPTIONS', 'DELETE', 'PUT'],\n    })\n)\n\nexport default async (req, res) => {\n    await cors(req, res)\n    const { email, password } = req.body\n    try {\n        if (!isEmail(email)){\n            return res.status(422).send(\"Email should be a valid email address\")\n        }\n\n        const user = await User.findOne({\n            where: { email: email }\n        })\n\n        if(!user) {\n            return res.status(404).send(\"User account does not exist\");\n        }\n\n        if(!user.active){\n            return res.status(404).send(\"This account is temporarily disabled, please contact the support email\");\n        }\n\n        const passwordsMatch = await bcrypt.compare(password, user.password)\n        if (passwordsMatch){\n            const token = jwt.sign({ userId: user.id}, process.env.JWT_SECRET, {expiresIn: '7d'});\n            res.status(200).send(token);\n        } else {\n            res.status(401).send(\"Password is not correct\");\n        }\n    } catch (error) {\n        // console.error(error)\n        res.status(500).send(\"Error logging in user\")\n    }\n}"]},"metadata":{},"sourceType":"module"}