{"ast":null,"code":"import Cors from 'cors';\nimport bcrypt from 'bcrypt';\nimport { v4 as uuidv4 } from 'uuid';\nimport jwt from 'jsonwebtoken';\nimport isEmail from 'validator/lib/isEmail';\nimport isLength from 'validator/lib/isLength';\nimport initMiddleware from '@/lib/init-middleware';\nimport { users as User } from '@/models/index'; // import { confirmEmailAddress } from '../../../../email-templates/confirm-email'\n// Initialize the cors middleware\n\nconst cors = initMiddleware( // You can read more about the available options here: https://github.com/expressjs/cors#configuration-options\nCors({\n  // Only allow requests with GET, POST and OPTIONS\n  methods: ['GET', 'POST', 'OPTIONS', 'DELETE', 'PUT']\n}));\nexport default (async (req, res) => {\n  await cors(req, res);\n  const confirmToken = uuidv4(); // Recieved params from request\n\n  let {\n    name,\n    email,\n    password,\n    confirmPassword\n  } = req.body;\n\n  try {\n    if (!isLength(name, {\n      min: 3\n    })) {\n      return res.status(422).send(\"The name should be a minimum of Three characters long\");\n    } else if (!isEmail(email)) {\n      return res.status(422).send(\"Email should be a valid email address\");\n    } else if (!isLength(password, {\n      min: 6\n    })) {\n      return res.status(422).send(\"Password should be minimum of Six characters long\");\n    } else if (password != confirmPassword) {\n      return res.status(422).send(\"Password doesn't match\");\n    } // Check if user with that email if already exists\n\n\n    const user = await User.findOne({\n      where: {\n        email: email\n      }\n    });\n\n    if (user) {\n      return res.status(422).send(`User already exist with email ${email}`);\n    } // Encrypt password with bcrypt\n\n\n    const passwordHash = await bcrypt.hash(password, 10);\n    const newUser = await User.create({\n      name,\n      email,\n      password: passwordHash,\n      emailResetToken: confirmToken\n    });\n    const token = jwt.sign({\n      userId: newUser.id\n    }, process.env.JWT_SECRET, {\n      expiresIn: '7d'\n    }); // confirmEmailAddress(newUser)\n\n    res.status(201).json(token);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error in account signup. Please try again.\");\n  }\n});","map":{"version":3,"sources":["C:/Users/AJ/Downloads/Spyberrys/Spyberrys/Spyberrys_app/pages/api/v1/auth/signup.js"],"names":["Cors","bcrypt","v4","uuidv4","jwt","isEmail","isLength","initMiddleware","users","User","cors","methods","req","res","confirmToken","name","email","password","confirmPassword","body","min","status","send","user","findOne","where","passwordHash","hash","newUser","create","emailResetToken","token","sign","userId","id","process","env","JWT_SECRET","expiresIn","json","error","console"],"mappings":"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","sourcesContent":["import Cors from 'cors'\nimport bcrypt from 'bcrypt'\nimport { v4 as uuidv4 } from 'uuid'\nimport jwt from 'jsonwebtoken'\nimport isEmail from 'validator/lib/isEmail'\nimport isLength from 'validator/lib/isLength'\nimport initMiddleware from '@/lib/init-middleware'\nimport { users as User } from '@/models/index'\n// import { confirmEmailAddress } from '../../../../email-templates/confirm-email'\n\n// Initialize the cors middleware\nconst cors = initMiddleware(\n    // You can read more about the available options here: https://github.com/expressjs/cors#configuration-options\n    Cors({\n        // Only allow requests with GET, POST and OPTIONS\n        methods: ['GET', 'POST', 'OPTIONS', 'DELETE', 'PUT'],\n    })\n)\n\nexport default async (req, res) => {\n    await cors(req, res)\n    const confirmToken = uuidv4()\n    // Recieved params from request\n    let { name, email, password, confirmPassword } = req.body\n    try {\n        if (!isLength(name, {min: 3})) {\n            return res.status(422).send(\"The name should be a minimum of Three characters long\")\n        } else if (!isEmail(email)){\n            return res.status(422).send(\"Email should be a valid email address\")\n        } else if (!isLength(password, {min: 6})){\n            return res.status(422).send(\"Password should be minimum of Six characters long\")\n        } else if (password != confirmPassword){\n            return res.status(422).send(\"Password doesn't match\")\n        }\n\n        // Check if user with that email if already exists\n        const user = await User.findOne({\n            where: { email: email }\n        })\n\n        if(user){\n            return res.status(422).send(`User already exist with email ${email}`)\n        }\n\n        // Encrypt password with bcrypt\n        const passwordHash = await bcrypt.hash(password, 10)\n\n        const newUser = await User.create({\n            name, \n            email, \n            password: passwordHash,\n            emailResetToken: confirmToken\n        })\n\n        const token = jwt.sign({ userId: newUser.id }, process.env.JWT_SECRET, {expiresIn: '7d'})\n\n        // confirmEmailAddress(newUser)\n    \n        res.status(201).json(token)\n    } catch (error) {\n        console.error(error)\n        res.status(500).send(\"Error in account signup. Please try again.\")\n    }\n}"]},"metadata":{},"sourceType":"module"}