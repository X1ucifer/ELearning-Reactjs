{"ast":null,"code":"'use strict';\n\nconst {\n  Model\n} = require('sequelize');\n\nmodule.exports = (sequelize, Sequelize) => {\n  class Course extends Model {\n    /**\n     * Helper method for defining associations.\n     * This method is not a part of Sequelize lifecycle.\n     * The `models/index` file will call this method automatically.\n     */\n    // static associate(models) {\n    //     // define association here\n    //     Course.belongsTo(models.User, {\n    //         foreignKey: 'userId',\n    //         onDelete: 'CASCADE'\n    //     });\n    // }\n  }\n\n  ;\n  Course.init({\n    id: {\n      type: Sequelize.UUID,\n      defaultValue: Sequelize.UUIDV4,\n      primaryKey: true\n    },\n    title: {\n      type: Sequelize.STRING\n    },\n    overview: {\n      type: Sequelize.TEXT\n    },\n    price: {\n      type: Sequelize.FLOAT\n    },\n    free: {\n      type: Sequelize.BOOLEAN\n    },\n    published: {\n      type: Sequelize.BOOLEAN,\n      defaultValue: false\n    },\n    profilePhoto: {\n      type: Sequelize.STRING\n    },\n    coverPhoto: {\n      type: Sequelize.STRING\n    },\n    courese_preview_img: {\n      type: Sequelize.STRING\n    },\n    course_preview_video: {\n      type: Sequelize.STRING\n    },\n    duration: {\n      type: Sequelize.STRING\n    },\n    duration: {\n      type: Sequelize.STRING\n    },\n    lessons: {\n      type: Sequelize.STRING\n    },\n    access: {\n      type: Sequelize.STRING\n    },\n    category: {\n      type: Sequelize.STRING\n    },\n    userId: {\n      type: Sequelize.UUID,\n      onDelete: 'CASCADE',\n      references: {\n        model: 'Users',\n        key: 'id',\n        as: 'userId'\n      }\n    }\n  }, {\n    sequelize,\n    modelName: 'Course'\n  });\n  return Course;\n};","map":{"version":3,"sources":["C:/Users/AJ/Downloads/Spyberrys/Spyberrys/Spyberrys_app/models/course.js"],"names":["Model","require","module","exports","sequelize","Sequelize","Course","init","id","type","UUID","defaultValue","UUIDV4","primaryKey","title","STRING","overview","TEXT","price","FLOAT","free","BOOLEAN","published","profilePhoto","coverPhoto","courese_preview_img","course_preview_video","duration","lessons","access","category","userId","onDelete","references","model","key","as","modelName"],"mappings":"AAAA;;AACA,MAAM;AACFA,EAAAA;AADE,IAEFC,OAAO,CAAC,WAAD,CAFX;;AAGAC,MAAM,CAACC,OAAP,GAAiB,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACvC,QAAMC,MAAN,SAAqBN,KAArB,CAA2B;AACvB;AACR;AACA;AACA;AACA;AACQ;AACA;AACA;AACA;AACA;AACA;AACA;AAZuB;;AAa1B;AAEDM,EAAAA,MAAM,CAACC,IAAP,CAAY;AACRC,IAAAA,EAAE,EAAE;AACAC,MAAAA,IAAI,EAAEJ,SAAS,CAACK,IADhB;AAEAC,MAAAA,YAAY,EAAEN,SAAS,CAACO,MAFxB;AAGAC,MAAAA,UAAU,EAAE;AAHZ,KADI;AAMRC,IAAAA,KAAK,EAAE;AACHL,MAAAA,IAAI,EAAEJ,SAAS,CAACU;AADb,KANC;AASRC,IAAAA,QAAQ,EAAE;AACNP,MAAAA,IAAI,EAAEJ,SAAS,CAACY;AADV,KATF;AAYRC,IAAAA,KAAK,EAAE;AACHT,MAAAA,IAAI,EAAEJ,SAAS,CAACc;AADb,KAZC;AAeRC,IAAAA,IAAI,EAAE;AACFX,MAAAA,IAAI,EAAEJ,SAAS,CAACgB;AADd,KAfE;AAkBRC,IAAAA,SAAS,EAAE;AACPb,MAAAA,IAAI,EAAEJ,SAAS,CAACgB,OADT;AAEPV,MAAAA,YAAY,EAAE;AAFP,KAlBH;AAsBRY,IAAAA,YAAY,EAAE;AACVd,MAAAA,IAAI,EAAEJ,SAAS,CAACU;AADN,KAtBN;AAyBRS,IAAAA,UAAU,EAAE;AACRf,MAAAA,IAAI,EAAEJ,SAAS,CAACU;AADR,KAzBJ;AA4BRU,IAAAA,mBAAmB,EAAE;AACjBhB,MAAAA,IAAI,EAAEJ,SAAS,CAACU;AADC,KA5Bb;AA+BRW,IAAAA,oBAAoB,EAAE;AAClBjB,MAAAA,IAAI,EAAEJ,SAAS,CAACU;AADE,KA/Bd;AAkCRY,IAAAA,QAAQ,EAAE;AACNlB,MAAAA,IAAI,EAAEJ,SAAS,CAACU;AADV,KAlCF;AAqCRY,IAAAA,QAAQ,EAAE;AACNlB,MAAAA,IAAI,EAAEJ,SAAS,CAACU;AADV,KArCF;AAwCRa,IAAAA,OAAO,EAAE;AACLnB,MAAAA,IAAI,EAAEJ,SAAS,CAACU;AADX,KAxCD;AA2CRc,IAAAA,MAAM,EAAE;AACJpB,MAAAA,IAAI,EAAEJ,SAAS,CAACU;AADZ,KA3CA;AA8CRe,IAAAA,QAAQ,EAAE;AACNrB,MAAAA,IAAI,EAAEJ,SAAS,CAACU;AADV,KA9CF;AAiDRgB,IAAAA,MAAM,EAAE;AACJtB,MAAAA,IAAI,EAAEJ,SAAS,CAACK,IADZ;AAEJsB,MAAAA,QAAQ,EAAE,SAFN;AAGJC,MAAAA,UAAU,EAAE;AACRC,QAAAA,KAAK,EAAE,OADC;AAERC,QAAAA,GAAG,EAAE,IAFG;AAGRC,QAAAA,EAAE,EAAE;AAHI;AAHR;AAjDA,GAAZ,EA0DG;AACChC,IAAAA,SADD;AAECiC,IAAAA,SAAS,EAAE;AAFZ,GA1DH;AA8DA,SAAO/B,MAAP;AACH,CA/ED","sourcesContent":["'use strict';\nconst {\n    Model\n} = require('sequelize');\nmodule.exports = (sequelize, Sequelize) => {\n    class Course extends Model {\n        /**\n         * Helper method for defining associations.\n         * This method is not a part of Sequelize lifecycle.\n         * The `models/index` file will call this method automatically.\n         */\n        // static associate(models) {\n        //     // define association here\n        //     Course.belongsTo(models.User, {\n        //         foreignKey: 'userId',\n        //         onDelete: 'CASCADE'\n        //     });\n        // }\n    };\n    \n    Course.init({\n        id: {\n            type: Sequelize.UUID,\n            defaultValue: Sequelize.UUIDV4,\n            primaryKey: true\n        },\n        title: {\n            type: Sequelize.STRING\n        },\n        overview: {\n            type: Sequelize.TEXT\n        },\n        price: {\n            type: Sequelize.FLOAT\n        },\n        free: {\n            type: Sequelize.BOOLEAN\n        },\n        published: {\n            type: Sequelize.BOOLEAN,\n            defaultValue: false\n        },\n        profilePhoto: {\n            type: Sequelize.STRING\n        },\n        coverPhoto: {\n            type: Sequelize.STRING\n        },\n        courese_preview_img: {\n            type: Sequelize.STRING\n        },\n        course_preview_video: {\n            type: Sequelize.STRING\n        },\n        duration: {\n            type: Sequelize.STRING\n        },\n        duration: {\n            type: Sequelize.STRING\n        },\n        lessons: {\n            type: Sequelize.STRING\n        },\n        access: {\n            type: Sequelize.STRING\n        },\n        category: {\n            type: Sequelize.STRING\n        },\n        userId: {\n            type: Sequelize.UUID,\n            onDelete: 'CASCADE',\n            references: {\n                model: 'Users',\n                key: 'id',\n                as: 'userId',\n            }\n        }\n    }, {\n        sequelize,\n        modelName: 'Course',\n    });\n    return Course;\n};"]},"metadata":{},"sourceType":"script"}